/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type EnforcedOptionParamStruct = {
  eid: BigNumberish;
  msgType: BigNumberish;
  options: BytesLike;
};

export type EnforcedOptionParamStructOutput = [
  eid: bigint,
  msgType: bigint,
  options: string
] & { eid: bigint; msgType: bigint; options: string };

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export interface AddressFreeBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIELD_SIZE"
      | "MESSAGE_TYPE_RETURN"
      | "MESSAGE_TYPE_SEND"
      | "ROOT_HISTORY_SIZE"
      | "ZERO_VALUE"
      | "allowInitializePath"
      | "combineOptions"
      | "commitments"
      | "consumeBridge"
      | "consumeBridgeInCurrentChain"
      | "consumeCode"
      | "consumeTransfer"
      | "createBridge"
      | "createTransfer"
      | "currentRootIndex"
      | "customCombineOptions"
      | "decodeMessage"
      | "encodeMessage"
      | "endpoint"
      | "enforcedOptions"
      | "filledSubtrees"
      | "getLastRoot"
      | "hashLeftRight"
      | "hasher"
      | "isComposeMsgSender"
      | "isKnownRoot"
      | "isSpent"
      | "isSpentArray"
      | "levels"
      | "lzEndpoint"
      | "lzReceive"
      | "metadata"
      | "nextIndex"
      | "nextNonce"
      | "nullifierHashes"
      | "oAppVersion"
      | "owner"
      | "peers"
      | "quote"
      | "renounceOwnership"
      | "roots"
      | "send"
      | "setCode"
      | "setDelegate"
      | "setEnforcedOptions"
      | "setPeer"
      | "transferOwnership"
      | "transferValues"
      | "validationModules"
      | "verifier"
      | "zeros"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeConsumed"
      | "BridgeCreated"
      | "ConsumeCode"
      | "EnforcedOptionSet"
      | "MessageReceived"
      | "MessageSent"
      | "NewCode"
      | "OwnershipTransferred"
      | "PeerSet"
      | "ReturnMessageSent"
      | "Success"
      | "ValueTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_TYPE_RETURN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_TYPE_SEND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeBridge",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BytesLike[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeBridgeInCurrentChain",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeCode",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeTransfer",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BytesLike[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBridge",
    values: [BytesLike, AddressLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransfer",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customCombineOptions",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMessage",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isSpent", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isSpentArray",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "metadata", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BytesLike[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCode",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validationModules",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_TYPE_RETURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_TYPE_SEND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeBridgeInCurrentChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customCombineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSpentArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;
}

export namespace BridgeConsumedEvent {
  export type InputTuple = [commitment: BytesLike, to: AddressLike];
  export type OutputTuple = [commitment: string, to: string];
  export interface OutputObject {
    commitment: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeCreatedEvent {
  export type InputTuple = [commitment: BytesLike, metadata: string];
  export type OutputTuple = [commitment: string, metadata: string];
  export interface OutputObject {
    commitment: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumeCodeEvent {
  export type InputTuple = [
    to: AddressLike,
    nullifierHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    nullifierHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    to: string;
    nullifierHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnforcedOptionSetEvent {
  export type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct[]];
  export type OutputTuple = [
    _enforcedOptions: EnforcedOptionParamStructOutput[]
  ];
  export interface OutputObject {
    _enforcedOptions: EnforcedOptionParamStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    message: BytesLike,
    senderEid: BigNumberish,
    sender: BytesLike
  ];
  export type OutputTuple = [
    message: string,
    senderEid: bigint,
    sender: string
  ];
  export interface OutputObject {
    message: string;
    senderEid: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [message: BytesLike, dstEid: BigNumberish];
  export type OutputTuple = [message: string, dstEid: bigint];
  export interface OutputObject {
    message: string;
    dstEid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCodeEvent {
  export type InputTuple = [
    commitment: BytesLike,
    leafIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    leafIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    leafIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnMessageSentEvent {
  export type InputTuple = [message: BytesLike, dstEid: BigNumberish];
  export type OutputTuple = [message: string, dstEid: bigint];
  export interface OutputObject {
    message: string;
    dstEid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessEvent {
  export type InputTuple = [success: boolean];
  export type OutputTuple = [success: boolean];
  export interface OutputObject {
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValueTransferredEvent {
  export type InputTuple = [value: BigNumberish, to: AddressLike];
  export type OutputTuple = [value: bigint, to: string];
  export interface OutputObject {
    value: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AddressFreeBridge extends BaseContract {
  connect(runner?: ContractRunner | null): AddressFreeBridge;
  waitForDeployment(): Promise<this>;

  interface: AddressFreeBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  MESSAGE_TYPE_RETURN: TypedContractMethod<[], [bigint], "view">;

  MESSAGE_TYPE_SEND: TypedContractMethod<[], [bigint], "view">;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  allowInitializePath: TypedContractMethod<
    [origin: OriginStruct],
    [boolean],
    "view"
  >;

  combineOptions: TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;

  commitments: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  consumeBridge: TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      _dstEid: BigNumberish,
      _options: BytesLike,
      _returnOptions: BytesLike
    ],
    [void],
    "payable"
  >;

  consumeBridgeInCurrentChain: TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  consumeCode: TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: AddressLike,
      _validationsArgs: BytesLike[]
    ],
    [void],
    "payable"
  >;

  consumeTransfer: TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      transfer: boolean
    ],
    [void],
    "nonpayable"
  >;

  createBridge: TypedContractMethod<
    [
      _commitment: BytesLike,
      _validationModules: AddressLike[],
      _metadata: string
    ],
    [void],
    "payable"
  >;

  createTransfer: TypedContractMethod<
    [_commitment: BytesLike, _validationModules: AddressLike[]],
    [void],
    "payable"
  >;

  currentRootIndex: TypedContractMethod<[], [bigint], "view">;

  customCombineOptions: TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;

  decodeMessage: TypedContractMethod<
    [encodedMessage: BytesLike],
    [
      [bigint, bigint, string, string] & {
        msgType: bigint;
        extraOptionsLength: bigint;
        options: string;
        payload: string;
      }
    ],
    "view"
  >;

  encodeMessage: TypedContractMethod<
    [
      _payload: BytesLike,
      _msgType: BigNumberish,
      _extraReturnOptions: BytesLike
    ],
    [string],
    "view"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  enforcedOptions: TypedContractMethod<
    [eid: BigNumberish, msgType: BigNumberish],
    [string],
    "view"
  >;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getLastRoot: TypedContractMethod<[], [string], "view">;

  hashLeftRight: TypedContractMethod<
    [_hasher: AddressLike, _left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  isComposeMsgSender: TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;

  isKnownRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isSpent: TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;

  isSpentArray: TypedContractMethod<
    [_nullifierHashes: BytesLike[]],
    [boolean[]],
    "view"
  >;

  levels: TypedContractMethod<[], [bigint], "view">;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  metadata: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  nextIndex: TypedContractMethod<[], [bigint], "view">;

  nextNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  nullifierHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  quote: TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      _dstEid: BigNumberish,
      _options: BytesLike,
      _returnOptions: BytesLike
    ],
    [MessagingFeeStructOutput],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  send: TypedContractMethod<
    [_dstEid: BigNumberish, _payload: BytesLike, _options: BytesLike],
    [void],
    "payable"
  >;

  setCode: TypedContractMethod<
    [_commitment: BytesLike, _validationModules: AddressLike[]],
    [void],
    "payable"
  >;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setEnforcedOptions: TypedContractMethod<
    [_enforcedOptions: EnforcedOptionParamStruct[]],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferValues: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  validationModules: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  zeros: TypedContractMethod<[i: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MESSAGE_TYPE_RETURN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MESSAGE_TYPE_SEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowInitializePath"
  ): TypedContractMethod<[origin: OriginStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "combineOptions"
  ): TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "consumeBridge"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      _dstEid: BigNumberish,
      _options: BytesLike,
      _returnOptions: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "consumeBridgeInCurrentChain"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consumeCode"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: AddressLike,
      _validationsArgs: BytesLike[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "consumeTransfer"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      transfer: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBridge"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _validationModules: AddressLike[],
      _metadata: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTransfer"
  ): TypedContractMethod<
    [_commitment: BytesLike, _validationModules: AddressLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "currentRootIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "customCombineOptions"
  ): TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeMessage"
  ): TypedContractMethod<
    [encodedMessage: BytesLike],
    [
      [bigint, bigint, string, string] & {
        msgType: bigint;
        extraOptionsLength: bigint;
        options: string;
        payload: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeMessage"
  ): TypedContractMethod<
    [
      _payload: BytesLike,
      _msgType: BigNumberish,
      _extraReturnOptions: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enforcedOptions"
  ): TypedContractMethod<
    [eid: BigNumberish, msgType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [_hasher: AddressLike, _left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isComposeMsgSender"
  ): TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isKnownRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpent"
  ): TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpentArray"
  ): TypedContractMethod<[_nullifierHashes: BytesLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "metadata"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "nextIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nullifierHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _to: AddressLike,
      _validationsArgs: BytesLike[],
      _dstEid: BigNumberish,
      _options: BytesLike,
      _returnOptions: BytesLike
    ],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [_dstEid: BigNumberish, _payload: BytesLike, _options: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setCode"
  ): TypedContractMethod<
    [_commitment: BytesLike, _validationModules: AddressLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnforcedOptions"
  ): TypedContractMethod<
    [_enforcedOptions: EnforcedOptionParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferValues"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validationModules"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zeros"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;

  getEvent(
    key: "BridgeConsumed"
  ): TypedContractEvent<
    BridgeConsumedEvent.InputTuple,
    BridgeConsumedEvent.OutputTuple,
    BridgeConsumedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeCreated"
  ): TypedContractEvent<
    BridgeCreatedEvent.InputTuple,
    BridgeCreatedEvent.OutputTuple,
    BridgeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ConsumeCode"
  ): TypedContractEvent<
    ConsumeCodeEvent.InputTuple,
    ConsumeCodeEvent.OutputTuple,
    ConsumeCodeEvent.OutputObject
  >;
  getEvent(
    key: "EnforcedOptionSet"
  ): TypedContractEvent<
    EnforcedOptionSetEvent.InputTuple,
    EnforcedOptionSetEvent.OutputTuple,
    EnforcedOptionSetEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "NewCode"
  ): TypedContractEvent<
    NewCodeEvent.InputTuple,
    NewCodeEvent.OutputTuple,
    NewCodeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "ReturnMessageSent"
  ): TypedContractEvent<
    ReturnMessageSentEvent.InputTuple,
    ReturnMessageSentEvent.OutputTuple,
    ReturnMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "Success"
  ): TypedContractEvent<
    SuccessEvent.InputTuple,
    SuccessEvent.OutputTuple,
    SuccessEvent.OutputObject
  >;
  getEvent(
    key: "ValueTransferred"
  ): TypedContractEvent<
    ValueTransferredEvent.InputTuple,
    ValueTransferredEvent.OutputTuple,
    ValueTransferredEvent.OutputObject
  >;

  filters: {
    "BridgeConsumed(bytes32,address)": TypedContractEvent<
      BridgeConsumedEvent.InputTuple,
      BridgeConsumedEvent.OutputTuple,
      BridgeConsumedEvent.OutputObject
    >;
    BridgeConsumed: TypedContractEvent<
      BridgeConsumedEvent.InputTuple,
      BridgeConsumedEvent.OutputTuple,
      BridgeConsumedEvent.OutputObject
    >;

    "BridgeCreated(bytes32,string)": TypedContractEvent<
      BridgeCreatedEvent.InputTuple,
      BridgeCreatedEvent.OutputTuple,
      BridgeCreatedEvent.OutputObject
    >;
    BridgeCreated: TypedContractEvent<
      BridgeCreatedEvent.InputTuple,
      BridgeCreatedEvent.OutputTuple,
      BridgeCreatedEvent.OutputObject
    >;

    "ConsumeCode(address,bytes32,uint256)": TypedContractEvent<
      ConsumeCodeEvent.InputTuple,
      ConsumeCodeEvent.OutputTuple,
      ConsumeCodeEvent.OutputObject
    >;
    ConsumeCode: TypedContractEvent<
      ConsumeCodeEvent.InputTuple,
      ConsumeCodeEvent.OutputTuple,
      ConsumeCodeEvent.OutputObject
    >;

    "EnforcedOptionSet(tuple[])": TypedContractEvent<
      EnforcedOptionSetEvent.InputTuple,
      EnforcedOptionSetEvent.OutputTuple,
      EnforcedOptionSetEvent.OutputObject
    >;
    EnforcedOptionSet: TypedContractEvent<
      EnforcedOptionSetEvent.InputTuple,
      EnforcedOptionSetEvent.OutputTuple,
      EnforcedOptionSetEvent.OutputObject
    >;

    "MessageReceived(bytes,uint32,bytes32)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(bytes,uint32)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "NewCode(bytes32,uint32,uint256)": TypedContractEvent<
      NewCodeEvent.InputTuple,
      NewCodeEvent.OutputTuple,
      NewCodeEvent.OutputObject
    >;
    NewCode: TypedContractEvent<
      NewCodeEvent.InputTuple,
      NewCodeEvent.OutputTuple,
      NewCodeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "ReturnMessageSent(bytes,uint32)": TypedContractEvent<
      ReturnMessageSentEvent.InputTuple,
      ReturnMessageSentEvent.OutputTuple,
      ReturnMessageSentEvent.OutputObject
    >;
    ReturnMessageSent: TypedContractEvent<
      ReturnMessageSentEvent.InputTuple,
      ReturnMessageSentEvent.OutputTuple,
      ReturnMessageSentEvent.OutputObject
    >;

    "Success(bool)": TypedContractEvent<
      SuccessEvent.InputTuple,
      SuccessEvent.OutputTuple,
      SuccessEvent.OutputObject
    >;
    Success: TypedContractEvent<
      SuccessEvent.InputTuple,
      SuccessEvent.OutputTuple,
      SuccessEvent.OutputObject
    >;

    "ValueTransferred(uint256,address)": TypedContractEvent<
      ValueTransferredEvent.InputTuple,
      ValueTransferredEvent.OutputTuple,
      ValueTransferredEvent.OutputObject
    >;
    ValueTransferred: TypedContractEvent<
      ValueTransferredEvent.InputTuple,
      ValueTransferredEvent.OutputTuple,
      ValueTransferredEvent.OutputObject
    >;
  };
}
