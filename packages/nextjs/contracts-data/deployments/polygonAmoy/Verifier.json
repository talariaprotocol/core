{
  "address": "0xfBCfE32f7448A7bcf319a8De8E3368C4a0Da4032",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a0c86c23801e2afbc0e465de34510ccfd5759b2414f9e648c6b41cec80dd1f2",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0xfBCfE32f7448A7bcf319a8De8E3368C4a0Da4032",
    "transactionIndex": 1,
    "gasUsed": "888505",
    "logsBloom": "0x
    "blockHash": "0xcacfc999e664ce8df5f629efebe8524b6a936ca0d37ab439e5fd713805a9d6c6",
    "transactionHash": "0x1a0c86c23801e2afbc0e465de34510ccfd5759b2414f9e648c6b41cec80dd1f2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12689465,
        "transactionHash": "0x1a0c86c23801e2afbc0e465de34510ccfd5759b2414f9e648c6b41cec80dd1f2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000eb71ed911e4dfc35da80103a72fe983c8c709f33",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007e439fa373b3290000000000000000000000000000000000000000000000002b8fd1442b0f39060000000000000000000000000000000000000000000002c36c1bb14f30791eb80000000000000000000000000000000000000000000000002b118da4879b85dd0000000000000000000000000000000000000000000002c36c99f4eed3ecd1e1",
        "logIndex": 4,
        "blockHash": "0xcacfc999e664ce8df5f629efebe8524b6a936ca0d37ab439e5fd713805a9d6c6"
      }
    ],
    "blockNumber": 12689465,
    "cumulativeGasUsed": "1012317",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d7dce6649d111b43e589a19e23ab1c5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/Verifier.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-05-12\\n*/\\n\\n// https://tornado.cash Verifier.sol generated by trusted setup ceremony.\\n/*\\n* d888888P                                           dP              a88888b.                   dP\\n*    88                                              88             d8'   `88                   88\\n*    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n*    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n*    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n*    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n* ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n*/\\n// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.20;\\n\\nlibrary Pairing {\\n  uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 X;\\n    uint256 Y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] X;\\n    uint256[2] Y;\\n  }\\n\\n  /*\\n   * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n   */\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.X == 0 && p.Y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n    }\\n  }\\n\\n  /*\\n   * @return r the sum of two points of G1\\n   */\\n  function plus(\\n    G1Point memory p1,\\n    G1Point memory p2\\n  ) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.X;\\n    input[1] = p1.Y;\\n    input[2] = p2.X;\\n    input[3] = p2.Y;\\n    bool success;\\n\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n    // Use \\\"invalid\\\" to make gas estimation work\\n      switch success case 0 { invalid() }\\n    }\\n\\n    require(success, \\\"pairing-add-failed\\\");\\n  }\\n\\n  /*\\n   * @return r the product of a point on G1 and a scalar, i.e.\\n   *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n   *         points p.\\n   */\\n  function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.X;\\n    input[1] = p.Y;\\n    input[2] = s;\\n    bool success;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n    // Use \\\"invalid\\\" to make gas estimation work\\n      switch success case 0 { invalid() }\\n    }\\n    require(success, \\\"pairing-mul-failed\\\");\\n  }\\n\\n  /* @return The result of computing the pairing check\\n   *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n   *         For example,\\n   *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n   */\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].X;\\n      input[j + 1] = p1[i].Y;\\n      input[j + 2] = p2[i].X[0];\\n      input[j + 3] = p2[i].X[1];\\n      input[j + 4] = p2[i].Y[0];\\n      input[j + 5] = p2[i].Y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n    // Use \\\"invalid\\\" to make gas estimation work\\n      switch success case 0 { invalid() }\\n    }\\n\\n    require(success, \\\"pairing-opcode-failed\\\");\\n\\n    return out[0] != 0;\\n  }\\n}\\n\\ncontract Verifier {\\n  uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n  using Pairing for *;\\n\\n  struct VerifyingKey {\\n    Pairing.G1Point alfa1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[7] IC;\\n  }\\n\\n  struct Proof {\\n    Pairing.G1Point A;\\n    Pairing.G2Point B;\\n    Pairing.G1Point C;\\n  }\\n\\n  function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n    vk.alfa1 = Pairing.G1Point(uint256(20692898189092739278193869274495556617788530808486270118371701516666252877969), uint256(11713062878292653967971378194351968039596396853904572879488166084231740557279));\\n    vk.beta2 = Pairing.G2Point([uint256(12168528810181263706895252315640534818222943348193302139358377162645029937006), uint256(281120578337195720357474965979947690431622127986816839208576358024608803542)], [uint256(16129176515713072042442734839012966563817890688785805090011011570989315559913), uint256(9011703453772030375124466642203641636825223906145908770308724549646909480510)]);\\n    vk.gamma2 = Pairing.G2Point([uint256(11559732032986387107991004021392285783925812861821192530917403151452391805634), uint256(10857046999023057135944570762232829481370756359578518086990519993285655852781)], [uint256(4082367875863433681332203403145435568316851327593401208105741076214120093531), uint256(8495653923123431417604973247489272438418190587263600148770280649306958101930)]);\\n    vk.delta2 = Pairing.G2Point([uint256(21280594949518992153305586783242820682644996932183186320680800072133486887432), uint256(150879136433974552800030963899771162647715069685890547489132178314736470662)], [uint256(1081836006956609894549771334721413187913047383331561601606260283167615953295), uint256(11434086686358152335540554643130007307617078324975981257823476472104616196090)]);\\n    vk.IC[0] = Pairing.G1Point(uint256(16225148364316337376768119297456868908427925829817748684139175309620217098814), uint256(5167268689450204162046084442581051565997733233062478317813755636162413164690));\\n    vk.IC[1] = Pairing.G1Point(uint256(12882377842072682264979317445365303375159828272423495088911985689463022094260), uint256(19488215856665173565526758360510125932214252767275816329232454875804474844786));\\n    vk.IC[2] = Pairing.G1Point(uint256(13083492661683431044045992285476184182144099829507350352128615182516530014777), uint256(602051281796153692392523702676782023472744522032670801091617246498551238913));\\n    vk.IC[3] = Pairing.G1Point(uint256(9732465972180335629969421513785602934706096902316483580882842789662669212890), uint256(2776526698606888434074200384264824461688198384989521091253289776235602495678));\\n    vk.IC[4] = Pairing.G1Point(uint256(8586364274534577154894611080234048648883781955345622578531233113180532234842), uint256(21276134929883121123323359450658320820075698490666870487450985603988214349407));\\n    vk.IC[5] = Pairing.G1Point(uint256(4910628533171597675018724709631788948355422829499855033965018665300386637884), uint256(20532468890024084510431799098097081600480376127870299142189696620752500664302));\\n    vk.IC[6] = Pairing.G1Point(uint256(15335858102289947642505450692012116222827233918185150176888641903531542034017), uint256(5311597067667671581646709998171703828965875677637292315055030353779531404812));\\n\\n  }\\n\\n  /*\\n   * @returns Whether the proof is valid given the hardcoded verifying key\\n   *          above and the public inputs\\n   */\\n  function verifyProof(\\n    bytes memory proof,\\n    uint256[6] memory input\\n  ) public view returns (bool) {\\n    uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n\\n    // Make sure that each element in the proof is less than the prime q\\n    for (uint8 i = 0; i < p.length; i++) {\\n      require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n    }\\n\\n    Proof memory _proof;\\n    _proof.A = Pairing.G1Point(p[0], p[1]);\\n    _proof.B = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n    _proof.C = Pairing.G1Point(p[6], p[7]);\\n\\n    VerifyingKey memory vk = verifyingKey();\\n\\n    // Compute the linear combination vk_x\\n    Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n    vk_x = Pairing.plus(vk_x, vk.IC[0]);\\n\\n    // Make sure that every input is less than the snark scalar field\\n    for (uint256 i = 0; i < input.length; i++) {\\n      require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-gte-snark-scalar-field\\\");\\n      vk_x = Pairing.plus(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n    }\\n\\n    return Pairing.pairing(\\n      Pairing.negate(_proof.A),\\n      _proof.B,\\n      vk.alfa1,\\n      vk.beta2,\\n      vk_x,\\n      vk.gamma2,\\n      _proof.C,\\n      vk.delta2\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xbc6cf2ff2905f73745f8f790992d542faf8b7a96dcae9b9f2aa0618a69bc24fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610f1b908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c63695ef6f91461002857600080fd5b346100d05760e03660031901126100d05760043567ffffffffffffffff8082116100cc57366023830112156100cc5781600401359081116100c757610076601f8201601f1916602001610149565b9181835236602483830101116100c357926020826100ad949360246100bf970183860137830101526100a73661016f565b90610459565b60405190151581529081906020820190565b0390f35b8380fd5b6100d3565b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176100c757604052565b604051906080820182811067ffffffffffffffff8211176100c757604052565b6040519060e0820182811067ffffffffffffffff8211176100c757604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176100c757604052565b80604312156101c1576040519060c0820182811067ffffffffffffffff8211176100c7576040528160e49182116101c1576024905b8282106101b15750505090565b81358152602091820191016101a4565b600080fd5b9061010080838303126101c15781601f840112156101c1576040519281840184811067ffffffffffffffff8211176100c757604052839181019283116101c157905b8282106102155750505090565b8151815260209182019101610208565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff811461024c5760010190565b610225565b634e487b7160e01b600052603260045260246000fd5b9060088110156102785760051b0190565b610251565b1561028457565b60405162461bcd60e51b815260206004820152602260248201527f76657269666965722d70726f6f662d656c656d656e742d6774652d7072696d656044820152612d7160f01b6064820152608490fd5b6102dc6100e9565b906000825260006020830152565b604051906020820182811067ffffffffffffffff8211176100c7576040526020368337565b6103176100e9565b906103206100e9565b6040368237825261032f6100e9565b60403682376020830152565b604051906060820182811067ffffffffffffffff8211176100c757604052816103626100e9565b6000815260006020820152815261037761030f565b602082015260406103866100e9565b9160008352600060208401520152565b9060078110156102785760051b0190565b600019811461024c5760010190565b9060068110156102785760051b0190565b156103ce57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b906001820180921161024c57565b906002820180921161024c57565b906003820180921161024c57565b906004820180921161024c57565b906005820180921161024c57565b61046d6020918280825183010191016101c6565b9260005b60ff811660088110156104c157906104b77f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476104b06104bc9489610267565b511061027d565b61023b565b610471565b505091906104cd61033b565b938051828201516104dc6100e9565b9182528382015285526104ed6100e9565b92604082015184526060820151838501526105066100e9565b6080830151815260a08301518482015261051e6100e9565b9485528385015282860193845260e060c083015192015161053d6100e9565b9283528383015260408601918252610553610a0b565b9261055c6100e9565b96600088526000828901526105786080860198895151906106ca565b926000905b600682106105b65750506105b3969750610597905161062f565b945190845190850151916060604087015195519601519661081f565b90565b9093610623610629916105f47f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016105ed89876103b6565b51106103c7565b61061d61060b8d516106058a610413565b90610396565b5161061689876103b6565b5190610722565b906106ca565b946103a7565b9061057d565b6000602061063b6100e9565b82815201528051908115806106ad575b1561066857505061065a6100e9565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161024c576106a26100e9565b918252602082015290565b5060208101511561064b565b9060048110156102785760051b0190565b60609092919260c06106da6100e9565b91600083526000602084015260208396816106f3610109565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa1561072057565bfe5b919061072c6100e9565b60008152600060208201528093604051606081019381851067ffffffffffffffff8611176100c7576020608093606096604052863685378051845201516020830152604082015260076107cf195a01fa1561072057565b60405190610320820182811067ffffffffffffffff8211176100c75760405260188252610300366020840137565b9060068202918083046006149015171561024c57565b80518210156102785760209160051b010190565b156107e257565b60405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b6044820152606490fd5b949195969290939661082f610109565b9586526020978897888801526040870152606086015261084d610109565b9384528584015260408301526060820152610866610783565b9160005b600481106108a2575050506103006108806102ea565b9384920160086107cf195a01fa80156107205761089c906107db565b51151590565b61097491929394506108b3816107b1565b6108bd82856106b9565b51516108c982886107c7565b52866108d583866106b9565b5101516108ea6108e483610413565b886107c7565b526108f582866106b9565b5151516109046108e483610421565b5261091a61091283876106b9565b515160200190565b516109276108e48361042f565b528661093383876106b9565b510151516109436108e48361043d565b5261096e61096861096189610958868a6106b9565b51015160200190565b519261044b565b876107c7565b526103a7565b908493929161086a565b6040519060a0820182811067ffffffffffffffff8211176100c757604052816109a56100e9565b906000825260209160008382015281526109bd61030f565b828201526109c961030f565b60408201526109d661030f565b60608201526109e3610129565b9160005b60e081106109f757505060800152565b8190610a016102d4565b81860152016109e7565b610a1361097e565b90610a1c6100e9565b7f2dbfc3ec62a3eee5a3b4b464bcf1f8527bbca12adea0f1f12033cd4f61b0e09181526020907f19e55bd0b72c126da18665039556776642ff82e2f347f24fcea2475f4db087df828201528352610a716100e9565b7f1ae724ab134e5a7c6bd8a116fa5505b259522c0f164a5e8126e3ec7d34465f6e81527e9f1bcdc853f8e3531756bb625b0d1dc014f4ab57c3f79f4f4e2e7ef7e0ead682820152610ac06100e9565b7f23a8ca5760457e726365b92fd0ceb486665797cd68c35dcffd8e4ae8066691e981527f13ec7182c9fd68331a10f8be0fe885d730de5c7f89aa7d0b7bafaa009bbc9e3e83820152610b106100e9565b9182528282015281840152610b236100e9565b7f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed82820152610b736100e9565b7f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83820152610bc36100e9565b918252828201526040840152610bd76100e9565b7f2f0c63d0c53b3dfbca27b6b43ae7fbf55a38d78a21470996485b03128accc20881527e556502356e37ed150db2e36531b0f275fd6835c0fc1945922e270b48c48a8682820152610c266100e9565b7f02644c27b5dbd793592a70b735e22c798a5e309fa17a992a7dc2a050e01b298f81527f194776b6a53439d7336f389d2a8f6651e40885f5ca2538b0dc9cb534fb23f7fa83820152610c766100e9565b918252828201526060840152610ee2610c8d6100e9565b7f23df1bc9165e9c1c9b2bc036d8ebdd10e7aeae7e5e8019fde68aec7c818bb23e81527f0b6c92080d37c5fb2ddf30892a33665e5478432ef3f71ac8768ecbbe62c77892838201526080850190815152610ce56100e9565b7f1c7b2adf45e046caea000956b2ecb2d8617e710d2a7bb201a95ea276f92307b481527f2b15f07536f45948cf4abe6596637d902ffabb18c8c2f5c151544c294ce4a67284820152815160200152610d3b6100e9565b7f1cecfe92882a8c835a47bf01bfa655cf628cbba7f81cf4042179fd13edcd6a3981527f0154bfbb2cb786ca247d4b69183d1751f267bbc7656be8d0f0e7a5a47e2c110184820152815160400152610d916100e9565b7f1584616a7423efcc72f69ea84fa0b2bc01433677297f4e8351bebfc15bcd0cda81527f0623755b1488526daa9fecf0e11b110dd6df12c461579d792e1db65af523c8be84820152815160600152610de76100e9565b7f12fbb5bfca9d61357ba2d641604cf4852e21ef54faa180fe539c18994dc1da5a81527f2f09dd9972a1af5f7bcfccf3d7ab600c9d898ea6d6933150ba0ae228ece17e5f84820152815160800152610e3d6100e9565b7f0adb513796fdf2103022c64151ce05f7c7a6d9200e8d819fa59e654fc4bfe83c81527f2d64f72ef4eddf9ca032058ed2bf691758387e913a77cf99d6a3cfb37c8ba7ee84820152815160a001527f0bbe41e52237ac13eb7b01f3cb999b7394d08734e71b1c3ada62713e17eb560c610eb46100e9565b937f21e7c9bffda74bfd2c4393b6803d775545de6fa89145f4a23476241d9881b66185528401525160c00190565b5256fea26469706673582212208ec3dcc6d6776e4652493ddc4193b01e7e886f597590347ef4a4f5737a441f4b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c63695ef6f91461002857600080fd5b346100d05760e03660031901126100d05760043567ffffffffffffffff8082116100cc57366023830112156100cc5781600401359081116100c757610076601f8201601f1916602001610149565b9181835236602483830101116100c357926020826100ad949360246100bf970183860137830101526100a73661016f565b90610459565b60405190151581529081906020820190565b0390f35b8380fd5b6100d3565b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176100c757604052565b604051906080820182811067ffffffffffffffff8211176100c757604052565b6040519060e0820182811067ffffffffffffffff8211176100c757604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176100c757604052565b80604312156101c1576040519060c0820182811067ffffffffffffffff8211176100c7576040528160e49182116101c1576024905b8282106101b15750505090565b81358152602091820191016101a4565b600080fd5b9061010080838303126101c15781601f840112156101c1576040519281840184811067ffffffffffffffff8211176100c757604052839181019283116101c157905b8282106102155750505090565b8151815260209182019101610208565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff811461024c5760010190565b610225565b634e487b7160e01b600052603260045260246000fd5b9060088110156102785760051b0190565b610251565b1561028457565b60405162461bcd60e51b815260206004820152602260248201527f76657269666965722d70726f6f662d656c656d656e742d6774652d7072696d656044820152612d7160f01b6064820152608490fd5b6102dc6100e9565b906000825260006020830152565b604051906020820182811067ffffffffffffffff8211176100c7576040526020368337565b6103176100e9565b906103206100e9565b6040368237825261032f6100e9565b60403682376020830152565b604051906060820182811067ffffffffffffffff8211176100c757604052816103626100e9565b6000815260006020820152815261037761030f565b602082015260406103866100e9565b9160008352600060208401520152565b9060078110156102785760051b0190565b600019811461024c5760010190565b9060068110156102785760051b0190565b156103ce57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b906001820180921161024c57565b906002820180921161024c57565b906003820180921161024c57565b906004820180921161024c57565b906005820180921161024c57565b61046d6020918280825183010191016101c6565b9260005b60ff811660088110156104c157906104b77f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476104b06104bc9489610267565b511061027d565b61023b565b610471565b505091906104cd61033b565b938051828201516104dc6100e9565b9182528382015285526104ed6100e9565b92604082015184526060820151838501526105066100e9565b6080830151815260a08301518482015261051e6100e9565b9485528385015282860193845260e060c083015192015161053d6100e9565b9283528383015260408601918252610553610a0b565b9261055c6100e9565b96600088526000828901526105786080860198895151906106ca565b926000905b600682106105b65750506105b3969750610597905161062f565b945190845190850151916060604087015195519601519661081f565b90565b9093610623610629916105f47f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016105ed89876103b6565b51106103c7565b61061d61060b8d516106058a610413565b90610396565b5161061689876103b6565b5190610722565b906106ca565b946103a7565b9061057d565b6000602061063b6100e9565b82815201528051908115806106ad575b1561066857505061065a6100e9565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161024c576106a26100e9565b918252602082015290565b5060208101511561064b565b9060048110156102785760051b0190565b60609092919260c06106da6100e9565b91600083526000602084015260208396816106f3610109565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa1561072057565bfe5b919061072c6100e9565b60008152600060208201528093604051606081019381851067ffffffffffffffff8611176100c7576020608093606096604052863685378051845201516020830152604082015260076107cf195a01fa1561072057565b60405190610320820182811067ffffffffffffffff8211176100c75760405260188252610300366020840137565b9060068202918083046006149015171561024c57565b80518210156102785760209160051b010190565b156107e257565b60405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b6044820152606490fd5b949195969290939661082f610109565b9586526020978897888801526040870152606086015261084d610109565b9384528584015260408301526060820152610866610783565b9160005b600481106108a2575050506103006108806102ea565b9384920160086107cf195a01fa80156107205761089c906107db565b51151590565b61097491929394506108b3816107b1565b6108bd82856106b9565b51516108c982886107c7565b52866108d583866106b9565b5101516108ea6108e483610413565b886107c7565b526108f582866106b9565b5151516109046108e483610421565b5261091a61091283876106b9565b515160200190565b516109276108e48361042f565b528661093383876106b9565b510151516109436108e48361043d565b5261096e61096861096189610958868a6106b9565b51015160200190565b519261044b565b876107c7565b526103a7565b908493929161086a565b6040519060a0820182811067ffffffffffffffff8211176100c757604052816109a56100e9565b906000825260209160008382015281526109bd61030f565b828201526109c961030f565b60408201526109d661030f565b60608201526109e3610129565b9160005b60e081106109f757505060800152565b8190610a016102d4565b81860152016109e7565b610a1361097e565b90610a1c6100e9565b7f2dbfc3ec62a3eee5a3b4b464bcf1f8527bbca12adea0f1f12033cd4f61b0e09181526020907f19e55bd0b72c126da18665039556776642ff82e2f347f24fcea2475f4db087df828201528352610a716100e9565b7f1ae724ab134e5a7c6bd8a116fa5505b259522c0f164a5e8126e3ec7d34465f6e81527e9f1bcdc853f8e3531756bb625b0d1dc014f4ab57c3f79f4f4e2e7ef7e0ead682820152610ac06100e9565b7f23a8ca5760457e726365b92fd0ceb486665797cd68c35dcffd8e4ae8066691e981527f13ec7182c9fd68331a10f8be0fe885d730de5c7f89aa7d0b7bafaa009bbc9e3e83820152610b106100e9565b9182528282015281840152610b236100e9565b7f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed82820152610b736100e9565b7f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83820152610bc36100e9565b918252828201526040840152610bd76100e9565b7f2f0c63d0c53b3dfbca27b6b43ae7fbf55a38d78a21470996485b03128accc20881527e556502356e37ed150db2e36531b0f275fd6835c0fc1945922e270b48c48a8682820152610c266100e9565b7f02644c27b5dbd793592a70b735e22c798a5e309fa17a992a7dc2a050e01b298f81527f194776b6a53439d7336f389d2a8f6651e40885f5ca2538b0dc9cb534fb23f7fa83820152610c766100e9565b918252828201526060840152610ee2610c8d6100e9565b7f23df1bc9165e9c1c9b2bc036d8ebdd10e7aeae7e5e8019fde68aec7c818bb23e81527f0b6c92080d37c5fb2ddf30892a33665e5478432ef3f71ac8768ecbbe62c77892838201526080850190815152610ce56100e9565b7f1c7b2adf45e046caea000956b2ecb2d8617e710d2a7bb201a95ea276f92307b481527f2b15f07536f45948cf4abe6596637d902ffabb18c8c2f5c151544c294ce4a67284820152815160200152610d3b6100e9565b7f1cecfe92882a8c835a47bf01bfa655cf628cbba7f81cf4042179fd13edcd6a3981527f0154bfbb2cb786ca247d4b69183d1751f267bbc7656be8d0f0e7a5a47e2c110184820152815160400152610d916100e9565b7f1584616a7423efcc72f69ea84fa0b2bc01433677297f4e8351bebfc15bcd0cda81527f0623755b1488526daa9fecf0e11b110dd6df12c461579d792e1db65af523c8be84820152815160600152610de76100e9565b7f12fbb5bfca9d61357ba2d641604cf4852e21ef54faa180fe539c18994dc1da5a81527f2f09dd9972a1af5f7bcfccf3d7ab600c9d898ea6d6933150ba0ae228ece17e5f84820152815160800152610e3d6100e9565b7f0adb513796fdf2103022c64151ce05f7c7a6d9200e8d819fa59e654fc4bfe83c81527f2d64f72ef4eddf9ca032058ed2bf691758387e913a77cf99d6a3cfb37c8ba7ee84820152815160a001527f0bbe41e52237ac13eb7b01f3cb999b7394d08734e71b1c3ada62713e17eb560c610eb46100e9565b937f21e7c9bffda74bfd2c4393b6803d775545de6fa89145f4a23476241d9881b66185528401525160c00190565b5256fea26469706673582212208ec3dcc6d6776e4652493ddc4193b01e7e886f597590347ef4a4f5737a441f4b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}